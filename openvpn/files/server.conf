{%- from "openvpn/map.jinja" import server with context %}

local {{ server.bind.address }}
port {{ server.bind.port }}

{%- if server.topology == 'subnet' %}

# TCP or UDP server?
{%- if server.bind.protocol == 'tcp' %}
proto tcp-server
{%- else %}
proto udp
{%- endif %}

# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
dev {{ server.get('device', 'tun') }}

# Windows needs the TAP-Win32 adapter name
;dev-node MyTap

{%- if server.ssl.get('engine', 'default') == 'salt' %}
ca /etc/ssl/certs/ca-{{ server.ssl.authority }}.crt
cert /etc/ssl/certs/{{ server.ssl.certificate }}.crt
key /etc/ssl/private/{{ server.ssl.certificate }}.key
{%- else %}
ca /etc/openvpn/ssl/ca.crt
cert /etc/openvpn/ssl/server.crt
key /etc/openvpn/ssl/server.key
{%- endif %}
dh /etc/ssl/dhparams.pem

# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
topology {{ server.get('topology', 'subnet') }}
server {{ server.interface.network }} {{ server.interface.netmask }}

ifconfig-pool-persist /etc/openvpn/ipp.txt

# Configure server mode for ethernet bridging.
# You must first use your OS's bridging capability
# to bridge the TAP interface with the ethernet
# NIC interface.  Then you must manually set the
# IP/netmask on the bridge interface, here we
# assume 10.8.0.4/255.255.255.0.  Finally we
# must set aside an IP range in this subnet
# (start=10.8.0.50 end=10.8.0.100) to allocate
# to connecting clients.  Leave this line commented
# out unless you are ethernet bridging.
;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100

# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
;push "route 192.168.10.0 255.255.255.0"
;push "route 192.168.20.0 255.255.255.0"

# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).

# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
;client-config-dir ccd
;route 192.168.40.128 255.255.255.248
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.

# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
;client-config-dir ccd
;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2

{%- endif %}

{%- if server.topology == 'gateway' %}

dev {{ server.get('device', 'tun') }}
tls-server 

ca /etc/openvpn/ssl/ca.crt
cert /etc/openvpn/ssl/server.crt
key /etc/openvpn/ssl/server.key
dh /etc/openvpn/ssl/dh2048.pem

mode {{ server.get('mode', 'server') }}

ifconfig {{ server.endpoint.local }} {{ server.endpoint.remote }}
ifconfig-pool {{ server.dhcp_pool.start }} {{ server.dhcp_pool.end }}

{%- for route in server.get('routes', []) %}
push "route {{ route.network }} {{ route.netmask }}"
{%- endfor %}
{%- if server.redirect_gateway is defined %}
push "redirect-gateway"
{%- endif %}

route {{ server.interface.network }} {{ server.interface.netmask }}

{%- endif %}

# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
;client-to-client

# Uncomment this directive if multiple clients
# might connect with the same certificate/key
# files or common names.  This is recommended
# only for testing purposes.  For production use,
# each client should have its own certificate/key
# pair.
#
# IF YOU HAVE NOT GENERATED INDIVIDUAL
# CERTIFICATE/KEY PAIRS FOR EACH CLIENT,
# EACH HAVING ITS OWN UNIQUE "COMMON NAME",
# UNCOMMENT THIS LINE OUT.
;duplicate-cn

# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
keepalive 10 60
inactive 600

# For extra security beyond that provided
# by SSL/TLS, create an "HMAC firewall"
# to help block DoS attacks and UDP port flooding.
#
# Generate with:
#   openvpn --genkey --secret ta.key
#
# The server and each client must have
# a copy of this key.
# The second parameter should be '0'
# on the server and '1' on the clients.
;tls-auth ta.key 0

{%- if server.get('compression', True) %}
comp-lzo
{%- endif %}

;max-clients 100
;user nobody
;group nobody

persist-key
persist-tun

;status openvpn-status.log
;log         openvpn.log
;log-append  openvpn.log

verb 3
;mute 20
